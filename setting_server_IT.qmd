---
title: "Setting up a remote server"
format:
    html:
      toc: true
      theme: minty
---

## Why I need a server

External servers help with different tasks:

  - Get access to more computational power to perform your analyses
  - Hosting a web for a research project or research group
  - Hosting resources and applications
  - A place to share and store data
  - Others...

## Why a dedicated server in a data center?

When in need of a server (for web hosting, data sharing or computational tasks) we have two main
options, hosting ourselves the server or rent a dedicated server. These servers have several
advantages:

  (@) Available physical space: CREAF lacks of more space for servers, but the UAB offers space in
  the **insert here name of the facility of UAB where servers are**.
  
  (@) Downtime: Hosting ourselves a server in CREAF/UAB premises means that we depend on the UAB
  network. While this networks is fast and usually reliable, means that any failure in the network
  (at UAB or CREAF level) will affect access to the server.  
  Remote servers on the other hand are more reliable in this case.
  
  (@) UAB firewalls: Setting up a web, RStudio server or other software to being access outside the
  UAB usually involves a lot of work and constant contact with CREAF and UAB IT services until is
  correctly configured. Even with that, UAB policies changes from time to time without much notice.  
  Server clouds are controlled by us, so we control access and firewalls (downside is that we control
  access and firewall, so we need to configure them if needed).

## How to select a server

### Data center company

CREAF recommends [Hetzner](https://www.hetzner.com/) as the cloud server provider.
**To fill with more info**

### Needs

Choosing a server depends largely on the work that is gonna be done in it. Usually, the most
important aspects to check on the server are:

  - RAM: RAM will limit the computational power provided by the server, specially if we work with
  R programming language, that relies in RAM storage for objects.  
  - Processor cores: Number of cores will limit the availability of concurrent processes. Specially
  important when we plan on parallelize analyses or workflows.
  - Drive storage and type: Storage capacity will limit the amount of data (temporal or permanent)
  that we can store in the server. Drive type will affect the speed of the access to the data.
  - Location of the server: This has a legal consequence. Servers outside European Union must
  comply with GDPR legislation (data protection)

Here we'll describe several scenarios and the more important aspects to look at in each of them:

  1. **Hosting a web page for a simple project or research group**  
  Hosting simple web pages require not so much computational power, as well as storage. But it
  requires fast access to the files (specially if we have a static webpage). In this scenario the
  recommendations would be:
  
      + RAM: 16GB (as its the minimum Hetzner offers in dedicated servers)
      + Cores: 6 cores (as its the minimum Hetzner offers in dedicated servers)
      + Drive type: SSD
      + Drive capacity: Depends on the web to host, but 1 Tb is more than enough
      + Location: inside EU
  
  1. **RStudio server for analyses**  
  Hosting a RStudio server allows to have a centralized place for all research group members to
  code, share and store research projects. Different accounts can have its own Rstudio accessible
  from any place with internet connection. The characteristics of the server depends largely on the
  computations intended to be performed by the server:
  
      + RAM: 16GB to 128GB. Normal work like linear models, small and medium size data... will not
      require big amount of RAM, 16GB will suffice. Intensive work as big data (+1 million rows),
      spatial data with high resolutions, parallelization of time consuming analyses... will require
      more RAM, up to 128GB or even more.
      + Cores: 6 cores to 20 cores. Again depends on the type of computation needed. If
      paralellization is going to be an important step, then more cores is better (must also be
      paired with more RAM)
      + Drive type: SSD, will speed the data access.
      + Drive capacity: Depend on the size of the data intended to be used, but 4 Tb is a good
      starting point.

### RAID

If the server is intended to work also as a backup server, or data integrity is really really
important, then a [RAID](https://en.wikipedia.org/wiki/RAID) can be also configured in the server.
In layman terms, a RAID system duplicate storage drives present in the server, using the duplicates
for storing a copy of the data present in the *normal" drives. The extra space in the duplicated
drives is not accessible, as it works mirroring the contents of the other drives.

This is more complex of sertting up and maintaing, and this document will not cover RAID.

### Operative system

The only one, Linux. Sorry, this is what it is. Windows servers are insecure by default, more
exploited in the wild and require a more complex maintenance. Linux servers have also security
exploits, but are easier to maintain, and applying a frequent updates policy, are more secure by
default than Windows servers.

## Steps to rent a remote server

  1. Look at the previus sections of this document and decide what kind of server you need in terms
  of RAM and cores range.
  
  (@) Contact CREAF IT team at https://suport.creaf.cat/support/home and create a ticket with the
  following info:
  
     - **to fill**
  
  (@) Wait until IT confirms the process is done.
  
  (@) You have a remote server.


## I have a remote Linux server, what now?

When the renting process ends, you will receive an IP address (a numerical address that allows to
locate and connect your server), and a password for the `root` account.  
We will explain how to connect to the server using the IP address in the following sections, but is
important to take a moment to explain what is the `root` account in a Linux system.

### `root` user

`root`^[Also known as `superuser` or `administrator`] in Linux is a special user account with full
administrative privileges over the entire system. This means that the `root` user can access and
modify any file, run any command and perform any system task. This user should never be used
directly as is a risk in security and integrity of the server.  

For normal server use, we will create `user` accounts for each person with access to the server.
Some of these accounts (especially the person in charge of maintaining the server) can be
configured to use `sudo` command (**su**peruser **do**) to run administrative tasks usually only
allowed to `root` (updating the system, installing software...).

### Acessing the server from Windows

  TODO: need help here

### Accesing the server from Mac or Linux

To access the server from MacOs or any Linux distribution we need to use the terminal (`iTerm`
usually in MacOS, your favourite terminal emulator in Linux). We will use the `ssh` (**S**ecure
**Sh**ell) command:

```{.zsh}
ssh [user]@[server_ip_address]
```

where `[user]` is the user name and `[server_ip_address]` is the IP address of the server. So, for
the first time connecting the server, we need to use the `root` user and the IP address. Let's say
our server is located at `127.0.0.1`, then we need to enter in the terminal the following:

```{.zsh}
ssh root@127.0.0.1
```

It will ask for the `root` password that you should have from the rent confirmation email sent to
you. When writing passwords in the terminal, for security reasons the text is not showed, so don't
worry in when writing thte password no output appears in the terminal. Just press enter after typing
the password.

### **Important** Changing default `root` password

This is very important, and must be done only once, when accessing the server for the first time.
As explained before, `root` access can be very dangerous, so we need to change the default password
provided. In the following example the `root` password is changed to `myUltraSecurePassword1234`:

```{.zsh}
# passwd root

Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
```

:::{.callout-tip}
As said before, when typing the password and re-typing the password, nothing will appear in the
terminal but the password will be registered nonetheless. This is for security reasons.
:::

### Creating users

The next step is creating the necessary users. In the following example we will create the `johndoe`
user. Still logged as `root` user, we need to enter the following in the terminal

```{.zsh}
# useradd -m -G sudo johndoe
```

This will create the `johndoe` user without password, with `sudo` access (execute things as `root`)
and a personal folder at `/home/johndoe/`.  

Next we need is to add a password to the user:

```{.zsh}
# passwd johndoe

Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
```

Starting now, we can already connect to the server with our user. For this exit the server:

```{.zsh}
# exit
```

And in your local terminal, connect again to the server, but this time providing our new user,
`johndoe`. In MacOS/Linux, type `ssh johndoe@127.0.0.1` (remember to change the user to the
one you are using, as well the IP address to your server one). In Windows...(**TODO**)

### Maintaining the server Installing software (system libraries)

Now that we are connected to the server with out user (`jonhdoe`), first thing we need to do is
update the system to the latest versions of the software and system libraries. This allows us
to stay up to date with security patches to maintain the server reasonably secure. To do this, we
need to execute with `sudo` the following commands. You will be asked for the `johndoe` password
to ensure you have the permissions to update the system.

```{.zsh}
$ sudo apt-get update
```

This will update the software repositories information, to know which system updates are available.

```{.zsh}
$ sudo apt-get upgrade
```

This will apply any update found in the previous step.

`apt-get` can be also used to install new software that are in the Ubuntu repositories. Almost any
needed software (R, python, spatial libraries...) can be found in these repositories.  
For example, if we want to install R we can use:

```{.zsh}
$ sudo apt-get install r-base r-base-dev
```

This will install all necessary system libraries to run R in the terminal.
  
### Installing RStudio

Sadly, not all software is in the Ubuntu repositories. This is true, for example, for RStudio
software.

  - also explanation about R libraries


### Updating operative system

